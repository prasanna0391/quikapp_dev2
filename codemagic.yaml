definitions:
  # mac_mini_m2: &mac_mini_m2
  #  instance_type: mac_mini_m2
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APNS_TEAM_ID: $APNS_TEAM_ID
        BASE64_APNS_KEY: $BASE64_APNS_KEY
        PKG_NAME: $PKG_NAME
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        IS_DEEPLINK: $IS_DEEPLINK

        BASE64_P12: $BASE64_P12
        CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD
        BASE64_PROVISIONING_PROFILE: $BASE64_PROVISIONING_PROFILE

#        APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY
#        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
#        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
#    - &android_apk build/**/outputs/**/*.apk
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &pub_get
      name: Get packages
      script: |
        flutter pub get
    - &Configure_Firebase_for_iOS
      name: Configure Firebase for iOS
      script: |
          chmod +x ./scripts/firebase_ios_setup.sh
          ./scripts/firebase_ios_setup.sh

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "*********** App Name & Version ***********"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "VERSION_NAME: $VERSION_NAME"           
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "PKG_NAME: $PKG_NAME"
        
        echo "*********** Android Keystore ***********"
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"
        
        echo "*********** IOS Keystore ***********"
        echo "APNS_KEY_ID: $APNS_KEY_ID"
        echo "APNS_TEAM_ID: $APNS_TEAM_ID"
        echo "BASE64_APNS_KEY: $BASE64_APNS_KEY"
        
        echo "BASE64_P12: $BASE64_P12"
        echo "CERTIFICATE_PASSWORD: $CERTIFICATE_PASSWORD"
        echo "BASE64_PROVISIONING_PROFILE: $BASE64_PROVISIONING_PROFILE"
        
        #        echo "APP_STORE_CONNECT_PRIVATE_KEY: $APP_STORE_CONNECT_PRIVATE_KEY"
        #        echo "APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID"
        #        echo "APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER"
        
        echo "*********** Firebase Android config file ***********"
        echo "firebase_config_android: $firebase_config_android"
        
        echo "*********** Firebase IOS config file ***********"
        echo "firebase_config_ios: $firebase_config_ios"
        
        echo "*********** Splash Configuration ***********"
        echo "IS_SPLASH: $IS_SPLASH"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
        
        echo "*********** Push Notification Configuration ***********"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
        
        echo "*********** Bottom Navigation Configuration ***********"
        echo "IS_BOTTOMMENU: $IS_BOTTOMMENU"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"  
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"
        
        echo "*********** Permissions ***********"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"
        
        echo "*********** Publish Configuration ***********"
        echo "EMAIL_ID: $EMAIL_ID"
        
        echo "*********** Pull Down to Refresh Configuration ***********"
        echo "IS_PULLDOWN: $IS_PULLDOWN"
        
        echo "*********** DEEPLINK Configuration ***********"
        echo "IS_DEEPLINK: $IS_DEEPLINK"

    - &Validate_variables
      name: ‚úÖ Validate required environment variables
      script: |
                REQUIRED_VARS=(
                        BUNDLE_ID
                        APNS_TEAM_ID
                        BASE64_P12
                        BASE64_PROVISIONING_PROFILE
                        CERTIFICATE_PASSWORD
                      )
                
                      for VAR in "${REQUIRED_VARS[@]}"; do
                        if [ -z "${!VAR}" ]; then
                          echo "‚ùå Environment variable $VAR is missing. Please set it in Codemagic.yaml."
                          exit 1
                        fi
                      done
                      echo "Bundle ID: $BUNDLE_ID"
                      echo "‚úÖ All required environment variables are present and valid."
#        REQUIRED_VARS=(
#            BUNDLE_ID
#            APNS_TEAM_ID
#            APP_STORE_CONNECT_PRIVATE_KEY
#            APP_STORE_CONNECT_ISSUER_ID
#            APP_STORE_CONNECT_KEY_IDENTIFIER
#            APP_STORE_CONNECT_TEAM_ID
#          )
#
#          for VAR in "${REQUIRED_VARS[@]}"; do
#            if [ -z "${!VAR}" ]; then
#              echo "‚ùå Environment variable $VAR is missing. Please set it in Codemagic or your credentials group."
#              exit 1
#            fi
#          done
#
#          echo "‚úÖ All required environment variables are present and valid."

       

#        echo "‚úÖ All required environment variables are present and valid."
    - &manual_code_sign
      name: üîè Manual code signing from base64
      script: |
        echo "üîß Starting manual code signing from base64..."

                  # Ensure BASE64_P12 and BASE64_PROVISIONING_PROFILE are not empty
                  if [ -z "$BASE64_P12" ]; then
                    echo "‚ùå BASE64_P12 is empty or not set"
                    exit 1
                  fi
                  if [ -z "$BASE64_PROVISIONING_PROFILE" ]; then
                    echo "‚ùå BASE64_PROVISIONING_PROFILE is empty or not set"
                    exit 1
                  fi

                  # Debug: show length of BASE64_P12
                  echo "‚ÑπÔ∏è BASE64_P12 length: ${#BASE64_P12} characters"

                  # Decode .p12 certificate
                  echo "üì• Decoding distribution.p12 from base64..."
                  mkdir -p certs
                  echo "$BASE64_P12" | base64 --decode > certs/distribution.p12 || {
                    echo "‚ùå Failed to decode BASE64_P12"
                    exit 1
                  }

                  # Debug: inspect p12 file size
                  echo "‚ÑπÔ∏è distribution.p12 size:" $(stat -f%z certs/distribution.p12) "bytes"

                  # Decode provisioning profile
                  echo "üì• Decoding provisioning profile from base64..."
                  mkdir -p profiles
                  echo "$BASE64_PROVISIONING_PROFILE" | base64 --decode > profiles/profile.mobileprovision || {
                    echo "‚ùå Failed to decode BASE64_PROVISIONING_PROFILE"
                    exit 1
                  }

                  # Install the certificate
                  echo "üìú Importing distribution certificate..."
                  security create-keychain -p "" build.keychain
                  security import certs/distribution.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign || {
                    echo "‚ùå Failed to import distribution.p12"
                    exit 1
                  }
                  security list-keychains -s build.keychain
                  security default-keychain -s build.keychain
                  security unlock-keychain -p "" build.keychain

                  # Install provisioning profile
                  echo "üìÑ Installing provisioning profile..."
                  mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                  cp profiles/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/ || {
                    echo "‚ùå Failed to install provisioning profile"
                    exit 1
                  }

                  echo "‚úÖ Manual code signing setup complete!"
#        echo "üîß Starting manual code signing from base64..."
#
#        # Decode .p12 certificate
#        echo "üì• Decoding distribution.p12 from base64..."
#        mkdir -p certs
#        echo "$BASE64_P12" | base64 --decode > certs/distribution.p12
#
#        # Decode provisioning profile
#        echo "üì• Decoding provisioning profile from base64..."
#        mkdir -p profiles
#        echo "$BASE64_PROVISIONING_PROFILE" | base64 --decode > profiles/profile.mobileprovision
#
#        # Install the certificate
#        echo "üìú Importing distribution certificate..."
#        security create-keychain -p "" build.keychain
#        security import certs/distribution.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
#        security list-keychains -s build.keychain
#        security default-keychain -s build.keychain
#        security unlock-keychain -p "" build.keychain
#
#        # Install provisioning profile
#        echo "üìÑ Installing provisioning profile..."
#        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#        cp profiles/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
#
#        echo "‚úÖ Manual code signing setup complete!"

    - &Update_Target_Version
      name: üîß Set iOS deployment target
      script: |
        echo "üîß Ensuring iOS deployment target is set to 13.0..."
        PODFILE_PATH="ios/Podfile"
        
        if grep -q "platform :ios" "$PODFILE_PATH"; then
          sed -i '' "s/platform :ios, .*/platform :ios, '13.0'/" "$PODFILE_PATH"
          echo "‚úÖ Updated existing iOS deployment target to 13.0"
        else
          echo "platform :ios, '13.0'" | cat - "$PODFILE_PATH" > temp && mv temp "$PODFILE_PATH"
          echo "‚úÖ Added iOS deployment target 13.0 to Podfile"
        fi
    - &build_ipa
      name: Building iOS App with Feature Flags
      script: |
        echo "‚úÖ Building iOS IPA..."
        flutter build ipa \
          --release \
          --dart-define=WEB_URL="$WEB_URL" \
          --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
          --dart-define=PKG_NAME="$PKG_NAME" \
          --dart-define=APP_NAME="$APP_NAME" \
          --dart-define=ORG_NAME="$ORG_NAME" \
          --dart-define=VERSION_NAME="$VERSION_NAME" \
          --dart-define=VERSION_CODE="$VERSION_CODE" \
          --dart-define=EMAIL_ID="$EMAIL_ID" \
          --dart-define=IS_SPLASH="$IS_SPLASH" \
          --dart-define=SPLASH="$SPLASH" \
          --dart-define=SPLASH_BG="$SPLASH_BG" \
          --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
          --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
          --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
          --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
          --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
          --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
          --dart-define=LOGO_URL="$LOGO_URL" \
          --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
          --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
          --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
          --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
          --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
          --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
          --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
          --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
          --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
          --dart-define=IS_CAMERA="$IS_CAMERA" \
          --dart-define=IS_LOCATION="$IS_LOCATION" \
          --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
          --dart-define=IS_MIC="$IS_MIC" \
          --dart-define=IS_CONTACT="$IS_CONTACT" \
          --dart-define=IS_CALENDAR="$IS_CALENDAR" \
          --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
          --dart-define=IS_STORAGE="$IS_STORAGE" \
          --dart-define=firebase_config_android="$firebase_config_android" \
          --dart-define=firebase_config_ios="$firebase_config_ios" \
          --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
          --dart-define=APNS_TEAM_ID="$APNS_TEAM_ID" \
          --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
          --dart-define=KEY_STORE="$KEY_STORE" \
          --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
          --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
          --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build2.log
          #--no-codesign 
          echo "‚úÖ IPA build completed."
    - &install_CocoaPods
      name: Install CocoaPods
      script: |
        name: ‚ôªÔ∏è Clean and install pods
        script: |
        echo "‚ôªÔ∏è Cleaning and reinstalling CocoaPods..."
        cd ios
        rm -rf Pods Podfile.lock
        pod install --repo-update
        cd ..
        echo "‚úÖ CocoaPods installation complete!"
    - &autosigncode
      name: üîê Automatic code signing via App Store Connect
      script: |
        echo "üóï Starting automatic code signing..."

          # Step 0: Check if private key is empty
          if [ -z "$APP_STORE_CONNECT_PRIVATE_KEY" ]; then
            echo "‚ùå APP_STORE_CONNECT_PRIVATE_KEY is empty or not set"
            exit 1
          fi

          # Step 1: Decode and sanitize base64 PEM key
          echo "üîê Decoding base64 private key..."
          echo "$APP_STORE_CONNECT_PRIVATE_KEY" \
          | base64 --decode \
          | tr -d '\r' \
          | awk '{ printf "%s\n", $0 }' > private_key.p8

          # Step 1.1: Ensure newline at EOF
          tail -c1 private_key.p8 | read -r _ || echo >> private_key.p8

          # Step 2: Strip any non-ASCII characters (invisible BOM, etc.)
          echo "üßº Cleaning private key for non-ASCII characters..."
          LC_ALL=C tr -cd '\11\12\15\40-\176' < private_key.p8 > clean_key.p8
          mv clean_key.p8 private_key.p8

          # Step 2.1: Ensure END marker is present
          if ! grep -q "END PRIVATE KEY" private_key.p8; then
            echo "üóò Appending missing END PRIVATE KEY marker..."
            echo '-----END PRIVATE KEY-----' >> private_key.p8
          fi

          # Step 3: Verify PEM format
          echo "üìÑ Preview of decoded private_key.p8:"
          head -n 5 private_key.p8

          if ! grep -q "BEGIN PRIVATE KEY" private_key.p8 || ! grep -q "END PRIVATE KEY" private_key.p8; then
            echo "‚ùå Decoded private_key.p8 is not in valid PEM format!"
            exit 1
          else
            echo "‚úÖ private_key.p8 is in valid PEM format."
          fi

          # Step 4: Fetch signing files from App Store Connect
          echo "üöÄ Fetching signing files from App Store Connect..."

          app-store-connect fetch-signing-files \
          --type IOS_APP_ADHOC \
          --bundle-id "$BUNDLE_ID" \
          --create \
          --download \
          --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
          --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
          --private-key private_key.p8 \
          --team-id "$APP_STORE_CONNECT_TEAM_ID" \
          "$BUNDLE_ID"

          STATUS=$?

          if [ $STATUS -eq 0 ]; then
            echo "‚úÖ Code signing setup complete!"
          else
            echo "‚ùå Code signing failed with exit code $STATUS"
            echo "üîç Dumping private_key.p8 for debugging:"
            cat private_key.p8
            exit 1
          fi


    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
          echo "üöÄ Started: Downloading splash assets"
        
          mkdir -p assets/images/
        
          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
            wget --no-check-certificate -O assets/images/splash.png "$SPLASH"
          fi
        
          if [ ! -f assets/images/splash.png ]; then
            echo "‚ùå Error: Failed to download SPLASH logo"
            exit 1
          fi
        
          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
            echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
            wget -O assets/images/splash_bg.png "$SPLASH_BG"
            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Certificate issue or download failed. Retrying with --no-check-certificate..."
              wget --no-check-certificate -O assets/images/splash_bg.png "$SPLASH_BG"
            fi
        
            if [ ! -f assets/images/splash_bg.png ]; then
              echo "‚ùå Error: Failed to download SPLASH background"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi
        
          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
        else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
        fi




    - &update_sdkver
      name: Updating SDK version
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating minSdkVersion and targetSdkVersion..."

          # Make sure to handle in-place edit properly for both macOS and Linux
          sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
          sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle

          echo "‚úÖ SDK versions updated"
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi


    - &build_app
      name: Building App with Feature Flags
      script: |
          echo "‚úÖ Start Building APK...."
          flutter clean
          flutter pub get
          flutter build apk --release \
              --dart-define=WEB_URL="$WEB_URL" \
              --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
              --dart-define=IS_SPLASH="$IS_SPLASH" \
              --dart-define=SPLASH="$SPLASH" \
              --dart-define=SPLASH_BG="$SPLASH_BG" \
              --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
              --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
              --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
              --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
              --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
              --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
              --dart-define=IS_CAMERA="$IS_CAMERA" \
              --dart-define=IS_LOCATION="$IS_LOCATION" \
              --dart-define=IS_MIC="$IS_MIC" \
              --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
              --dart-define=IS_CONTACT="$IS_CONTACT" \
              --dart-define=IS_SMS="$IS_SMS" \
              --dart-define=IS_PHONE="$IS_PHONE" \
              --dart-define=IS_BLUETOOTH="$IS_BLUETOOTH" > flutter_build.log
              echo "‚úÖ Build APK Compleated...."
         
              

    - &change_proj_name
      name: Change Project Name
      script: |
        echo "App Name: $APP_NAME"
        # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')
        
        # 3Ô∏è‚É£ Extract old name from pubspec.yaml
        OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
        OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)
        
        echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."
        
        # Update pubspec.yaml
        sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml
        
        # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
          
         
          
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
          
          # Optional: Rename folder (if not on CI/CD)
          # cd ..
          # mv "$OLD_NAME" "$SANITIZED_NAME"
          # cd "$SANITIZED_NAME"
          
          # Clean and get packages
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
          
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üöÄ Started: Downloading logo from $LOGO_URL"

        mkdir -p assets/images/

        # Try downloading with SSL certificate check first (silent test)
        wget --spider --quiet "$LOGO_URL"
        if [ $? -ne 0 ]; then
          echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
          WGET_OPTS="--no-check-certificate"
        else
          WGET_OPTS=""
        fi

        # Attempt actual download
        wget $WGET_OPTS -O assets/images/logo.png "$LOGO_URL"

        # Check if the file was successfully downloaded
        if [ ! -f assets/images/logo.png ]; then
          echo "‚ùå Error: Failed to download logo from $LOGO_URL"
          exit 1
        fi

        flutter pub get
        echo "‚úÖ Completed: Logo downloaded"
#        echo "üöÄ Started: Downloading logo from $LOGO_URL"
#
#        mkdir -p assets/images/
#
#        # Try downloading with certificate check first
#        wget -O assets/images/logo.png "$LOGO_URL"
#        if [ $? -ne 0 ]; then
#        echo "‚ö†Ô∏è Certificate issue detected, retrying with --no-check-certificate"
#        wget --no-check-certificate -O assets/images/logo.png "$LOGO_URL"
#        fi
#
#        if [ ! -f assets/images/logo.png ]; then
#        echo "‚ùå Error: Failed to download logo from $LOGO_URL"
#        exit 1
#        fi
#
#        flutter pub get
#        echo "‚úÖ Completed: Logo downloaded"

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        echo "üöÄ Generating launcher icons"

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
           # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"
          

          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
        
          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi

           flutter pub get

           # Use updated command (deprecates `:main`)
           flutter pub run flutter_launcher_icons

           echo "‚úÖ Launcher icons generated successfully"
#        flutter pub run flutter_launcher_icons:main
#        flutter pub get


    - &change_app_name
      name: Change app name
      script: |
        echo "üöÄ Changing app name to: $APP_NAME"
      
          flutter pub run rename setAppName --value "$APP_NAME"
          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
            # Default values
          VERSION_NAME="${VERSION_NAME:-1.0.0}"
          VERSION_CODE="${VERSION_CODE:-100}"
        
          # Check if VERSION_NAME is empty or not set
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME=$DEFAULT_VERSION_NAME
            echo "üî¢ Setting DEFAULT_VERSION_NAME"
          fi

          # Check if VERSION_CODE is empty or not set
          if [ -z "$VERSION_CODE" ]; then
            VERSION_CODE=$DEFAULT_VERSION_CODE
            echo "üî¢ Setting DEFAULT_VERSION_CODE"
          fi

          echo "üî¢ VERSION_NAME: $VERSION_NAME"
          echo "üî¢ VERSION_CODE: $VERSION_CODE"
      
          echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
          # Replace or add version line in pubspec.yaml
          if grep -q "^version: " pubspec.yaml; then
            sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
          echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi
      
          flutter pub get
      
          echo "‚úÖ App name changed and version set successfully"

#        flutter pub run rename setAppName --value "$APP_NAME"
#        flutter pub get

    - &update_android_package
      name: Update Android Package Name
      script: |
        echo "Updating Android package name..."

        # Convert ORG_NAME and APP_NAME to lowercase and remove spaces/underscores
        CLEANED_ORG_NAME=$(echo "$ORG_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')
        CLEANED_APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')

        # Construct valid package name
        # PACKAGE_NAME="com.${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        # Prefer PKG_NAME if available
        if [ -n "$PKG_NAME" ]; then
        PACKAGE_NAME="$PKG_NAME"
        else
          PACKAGE_NAME="${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        fi

        # Validate package name format
        if [[ ! "$PACKAGE_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9]*(\.[a-zA-Z_][a-zA-Z0-9]*)+$ ]]; then
          echo "‚ùå ERROR: Invalid package name: $PACKAGE_NAME"
          exit 1
        fi

        echo "‚úî Package name: $PACKAGE_NAME"

        flutter pub run rename setBundleId  --value "$PACKAGE_NAME"

        # Update AndroidManifest.xml
        sed -i '' "s/package=\"[^\"]*\"/package=\"$PACKAGE_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in build.gradle
        sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PACKAGE_NAME\"/g" android/app/build.gradle

        echo "‚úî Package name updated to: $PACKAGE_NAME"

    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üîî Enabling Firebase Push Notifications for iOS..."

            mkdir -p firebase/ios
            if [ -n "$firebase_config_ios" ]; then
              wget -O firebase/ios/GoogleService-Info.plist "$firebase_config_ios"
            fi

            if [ -f "firebase/ios/GoogleService-Info.plist" ]; then
              cp firebase/ios/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
              echo "‚úÖ GoogleService-Info.plist copied."
            else
              echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
              exit 1
            fi

            if [ -f "firebase/ios/Package.resolved" ]; then
              mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
              cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
              echo "üì¶ Firebase SDK resolved from committed Package.resolved."
            else
              echo "‚ö†Ô∏è Package.resolved not found. Firebase SDK must be added manually in Xcode."
            fi

             if [ -n "$BASE64_APNS_KEY" ]; then
              echo "$BASE64_APNS_KEY" | base64 --decode > firebase/ios/AuthKey.p8
              echo "üì• Decoded AuthKey.p8 for APNs"
            else
              echo "‚ö†Ô∏è BASE64_APNS_KEY is not set. Skipping APNs AuthKey setup."
            fi

            if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
              echo "‚úÖ APNs entitlements already enabled."
            else
              echo "‚ö†Ô∏è Warning: Missing APNs entitlement in Runner.entitlements."
            fi

          else
            echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."
            rm -f ios/Runner/GoogleService-Info.plist
            rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
            echo "üßπ Cleaned up Firebase iOS config."
          fi


    - &get_json
      name: Get JSON file
      script: |
       
        if [ "$PUSH_NOTIFY" = "true" ]; then
        echo "üì• Downloading google-services.json..."
      
        # Ensure target directories exist
        mkdir -p android/app
        mkdir -p assets
      
        # Try downloading with SSL verification first
        wget --spider --quiet "$firebase_config_android"
        if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è SSL verification failed. Retrying with --no-check-certificate..."
        WGET_OPTS="--no-check-certificate"
        else
        WGET_OPTS=""
        fi
      
        # Download the file(s) using determined option
        wget $WGET_OPTS -O android/app/google-services.json "$firebase_config_android"
        wget $WGET_OPTS -O assets/google-services.json "$firebase_config_android"
        else
        echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

#         if [ "$PUSH_NOTIFY" = "true" ]; then
#          echo "üì• Downloading google-services.json..."
#
#          # Ensure target directories exist
#          mkdir -p android/app
#          mkdir -p assets
#
#          wget -O android/app/google-services.json "$firebase_config_android"
#          wget -O assets/google-services.json "$firebase_config_android"
#        else
#          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
#        fi

    - &Inject_Firebase
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating Android and iOS SDK versions..."
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android SDK Versions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üì± Updating Android minSdkVersion and targetSdkVersion in build.gradle"
          sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
          sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle
          echo "‚úÖ Android SDK versions updated"
        
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS Minimum Target Version ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üçè Updating iOS minimum deployment target in Podfile..."
          PODFILE_PATH="ios/Podfile"
        
          if [ -f "$PODFILE_PATH" ]; then
            sed -i.bak -E "s/platform :ios, '[0-9.]+'/platform :ios, '12.0'/" "$PODFILE_PATH"
            echo "‚úÖ iOS minimum deployment target updated to 12.0"
          else
            echo "‚ö†Ô∏è Podfile not found. Skipping iOS deployment target update."
          fi
        
          # Optional: iOS project.pbxproj iOS Deployment Target
          IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
          if [ -f "$IOS_PROJECT_FILE" ]; then
            sed -i'' -e "s/IPHONEOS_DEPLOYMENT_TARGET = .*;/IPHONEOS_DEPLOYMENT_TARGET = 12.0;/" "$IOS_PROJECT_FILE"
            echo "‚úÖ Xcode project iOS deployment target updated to 12.0"
          fi
        else
          echo "üö´ SDK version update skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_App_Version
      name: Inject Version Info into pubspec, build.gradle (Android) & Xcode project (iOS)
      script: |
        # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"
        # Check if VERSION_NAME is empty or not set
         if [ -z "$VERSION_NAME" ]; then
           VERSION_NAME=$DEFAULT_VERSION_NAME
           echo "üî¢ Setting DEFAULT_VERSION_NAME"
         fi
        
         # Check if VERSION_CODE is empty or not set
         if [ -z "$VERSION_CODE" ]; then
           VERSION_CODE=$DEFAULT_VERSION_CODE
           echo "üî¢ Setting DEFAULT_VERSION_CODE"
         fi
        
         echo "üî¢ VERSION_NAME: $VERSION_NAME"
         echo "üî¢ VERSION_CODE: $VERSION_CODE"
        echo "üîÑ Updating version to ${VERSION_NAME}+${VERSION_CODE}"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
        echo "‚úÖ Updated pubspec.yaml"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üîß Updating Android build.gradle..."
        sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
        echo "‚úÖ Android version updated: $VERSION_NAME ($VERSION_CODE)"
        
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS: project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        echo "üçè Updating iOS version info in project.pbxproj..."
        IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
        
        if [ -f "$IOS_PROJECT_FILE" ]; then
          sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
          sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
          echo "‚úÖ iOS version updated: $VERSION_NAME ($VERSION_CODE)"
        else
          echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
          exit 1
        fi




    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        echo "üîß Updating Android and iOS package name (bundle ID)..."
        
        # Validate package/bundle ID format (Java-style, dot-separated)
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
        echo "‚ùå ERROR: Invalid package/bundle identifier: $PKG_NAME"
        exit 1
        fi
        
        echo "‚úî Package name / Bundle ID: $PKG_NAME"
        
               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üì¶ Updating Android package..."
               flutter pub run rename setBundleId --value "$PKG_NAME"
        
               # Update AndroidManifest.xml
               sed -i "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml
               # For macOS: sed -i '' ...
               sed -i "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/g" android/app/build.gradle
        
               echo "‚úÖ Android package updated."
        
               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üçè Updating iOS bundle identifier..."
               IOS_PROJECT_PATH="ios/Runner.xcodeproj/project.pbxproj"
        
               if [ -f "$IOS_PROJECT_PATH" ]; then
                 sed -i "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $PKG_NAME;/g" "$IOS_PROJECT_PATH"
                 echo "‚úÖ iOS bundle identifier updated."
               else
                 echo "‚ùå iOS project file not found at $IOS_PROJECT_PATH"
                 exit 1
               fi         

    - &inject_entitlements_for_APNs
      name: üìÑ Inject entitlements for APNs
      script: |
          echo "üìÑ Checking entitlements setup..."
          ENTITLEMENTS_PATH="ios/Runner/Runner.entitlements"

          if [ ! -f "$ENTITLEMENTS_PATH" ]; then
          echo "‚ö†Ô∏è Runner.entitlements not found. Creating a default one..."
          cat <<EOF > "$ENTITLEMENTS_PATH"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>aps-environment</key>
            <string>development</string>
          </dict>
          </plist>
          EOF
          echo "‚úÖ Created default Runner.entitlements with aps-environment=development"
          fi

          echo "üîß Checking for existing CODE_SIGN_ENTITLEMENTS..."
          FILE="ios/Runner.xcodeproj/project.pbxproj"
          ENTITLEMENTS_LINE='CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;'

          if grep -q "CODE_SIGN_ENTITLEMENTS" "$FILE"; then
            sed -i '' "s|CODE_SIGN_ENTITLEMENTS = .*;|$ENTITLEMENTS_LINE|" "$FILE"
            echo "‚úÖ Updated entitlements reference."
          else
            echo "‚ö†Ô∏è CODE_SIGN_ENTITLEMENTS not found. Skipping automatic injection to avoid corrupting project.pbxproj."
            echo "üëâ Please set CODE_SIGN_ENTITLEMENTS manually in Xcode if needed."
          fi
    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
         # Default values
        VERSION_NAME="${VERSION_NAME:-1.0.0}"
        VERSION_CODE="${VERSION_CODE:-100}"
        
        # Check if VERSION_NAME is empty or not set
        if [ -z "$VERSION_NAME" ]; then
          VERSION_NAME=$DEFAULT_VERSION_NAME
          echo "üî¢ Setting DEFAULT_VERSION_NAME"
        fi
        
        # Check if VERSION_CODE is empty or not set
        if [ -z "$VERSION_CODE" ]; then
          VERSION_CODE=$DEFAULT_VERSION_CODE
          echo "üî¢ Setting DEFAULT_VERSION_CODE"
        fi
        
        echo "üî¢ VERSION_NAME: $VERSION_NAME"
        echo "üî¢ VERSION_CODE: $VERSION_CODE"
        
        echo "üîß Ensuring valid version in pubspec.yaml: $VERSION_NAME+$VERSION_CODE"
        if grep -q "^version: " pubspec.yaml; then
          sed -i.bak -E "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
          else
        echo "version: $VERSION_NAME+$VERSION_CODE" >> pubspec.yaml
          fi
  
        flutter pub get
        if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get Flutter dependencies"
        exit 1
        fi

        echo "‚úÖ Building APK..."
        flutter build apk \
            --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=APP_NAME="$APP_NAME" \
            --dart-define=ORG_NAME="$ORG_NAME" \
            --dart-define=VERSION_NAME="$VERSION_NAME" \
            --dart-define=VERSION_CODE="$VERSION_CODE" \
            --dart-define=EMAIL_ID="$EMAIL_ID" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=LOGO_URL="$LOGO_URL" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_DEEPLINK="$IS_DEEPLINK" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" \
            --dart-define=firebase_config_android="$firebase_config_android" \
            --dart-define=firebase_config_ios="$firebase_config_ios" \
            --dart-define=APNS_KEY_ID="$APNS_KEY_ID" \
            --dart-define=APNS_TEAM_ID="$APNS_TEAM_ID" \
            --dart-define=APNS_AUTH_KEY_URL="$APNS_AUTH_KEY_URL" \
            --dart-define=KEY_STORE="$KEY_STORE" \
            --dart-define=CM_KEYSTORE_PASSWORD="$CM_KEYSTORE_PASSWORD" \
            --dart-define=CM_KEY_ALIAS="$CM_KEY_ALIAS" \
            --dart-define=CM_KEY_PASSWORD="$CM_KEY_PASSWORD" > flutter_build.log
        if [ $? -ne 0 ]; then
        echo "‚ùå APK build failed"
        cat flutter_build.log
        exit 1
        fi
        echo "‚úÖ APK build completed."



workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 30
    instance_type: mac_mini_m2
    environment:
      flutter: stable
    scripts:
      - *change_proj_name
      - *debug_env
      - *update_package_names
#      - *set_default_version
      - *change_app_name
      - *Update_App_Version
      - *Update_SDK_Version
      - *get_json
      - *Inject_Firebase
#      - *Configure_Firebase_for_iOS
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *build_apk
#      - *build_ipa
    artifacts:
      - *android_apk
      - *android_abb
      - *ios_app
      - flutter_build.log
      - fcm_token.txt
    #        - *android_abb
    publishing: *email_release

  ios-workflow:
    name: iOS Workflow
    max_build_duration: 30
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      vars:
        BUNDLE_ID: $PKG_NAME
    scripts:
      - *change_proj_name
      - *debug_env
      - *change_app_name
      - *update_package_names
      - *Update_App_Version
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *Update_SDK_Version
      - *Validate_variables
      - name: üõ† Set bundle identifier in Xcode project
        script: |
          echo "üõ† Updating bundle identifier to $BUNDLE_ID..."
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/g" ios/Runner.xcodeproj/project.pbxproj
          echo "‚úÖ Bundle identifier updated."

      - *manual_code_sign
      - name: ‚öôÔ∏è Set manual code signing settings in Xcode project
        script: |
          PROFILE_PATH="profiles/profile.mobileprovision"
            
            echo "‚öôÔ∏è Setting manual code signing in Xcode project..."
            PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
            
            # Extract UUID from provisioning profile using security + PlistBuddy
            echo "üì§ Converting provisioning profile to plist..."
            security cms -D -i "$PROFILE_PATH" -o profile.plist
            
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
            
            if [ -z "$PROFILE_UUID" ]; then
            echo "‚ùå Could not extract UUID from provisioning profile plist."
            exit 1
            fi
          
          echo "‚ÑπÔ∏è Using provisioning profile UUID: $PROFILE_UUID"
          
          # Inject values into Xcode project
            sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $APNS_TEAM_ID;/g" "$PROJECT_FILE"
            sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = \"\";/g" "$PROJECT_FILE"
            sed -i '' "s/PROVISIONING_PROFILE = .*/PROVISIONING_PROFILE = \"$PROFILE_UUID\";/g" "$PROJECT_FILE"
            
            echo "‚úÖ Manual signing configuration applied."

      - name: üìÑ Ensure entitlements are correctly set
        script: |
            ENTITLEMENTS_PATH="ios/Runner/Runner.entitlements"
            PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
            ENTITLEMENTS_LINE="CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;"
            
            echo "üìÑ Ensuring entitlements file exists..."
            if [ ! -f "$ENTITLEMENTS_PATH" ]; then
              echo "‚ö†Ô∏è Runner.entitlements not found. Creating a default one..."
              cat <<EOF > "$ENTITLEMENTS_PATH"
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
            <key>aps-environment</key>
            <string>development</string>
            </dict>
            </plist>
            EOF
            echo "‚úÖ Created default Runner.entitlements with aps-environment=development"
            fi
            
            echo "üîç Checking for CODE_SIGN_ENTITLEMENTS in project file..."
            if grep -q "CODE_SIGN_ENTITLEMENTS" "$PROJECT_FILE"; then
            echo "‚úÖ CODE_SIGN_ENTITLEMENTS already present. Skipping insertion."
            else
            echo "‚ûï Inserting CODE_SIGN_ENTITLEMENTS into each build configuration..."
            
            awk -v line="$ENTITLEMENTS_LINE" '
            /Build configuration/ { inConfig=1 }
            inConfig && /buildSettings = {/ {
            print; print "        " line; next
            }
            { print }
            ' "$PROJECT_FILE" > tmp.pbxproj && mv tmp.pbxproj "$PROJECT_FILE"
            
            echo "‚úÖ CODE_SIGN_ENTITLEMENTS injected into build configurations."
            fi


      - *Inject_Firebase_iOS_Push
      - *Update_Target_Version
      - name: üîß Set Xcode project deployment target
        script: |
          echo "üîß Setting deployment target to 13.0 in Xcode project..."
          find ios/Runner.xcodeproj -name project.pbxproj -print0 | xargs -0 sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]*/IPHONEOS_DEPLOYMENT_TARGET = 13.0/g'
          echo "‚úÖ Xcode project deployment target updated to 13.0"

      - *install_CocoaPods
      - name: üì¶ Build Xcode archive
        script: |
            echo "üì¶ Building Xcode archive..."
  
            # Decode the provisioning profile
            PROFILE_PLIST=$(security cms -D -i profiles/profile.mobileprovision)
  
            # Extract UUID and Name (Specifier) from the profile
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< "$PROFILE_PLIST")
            PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print Name" /dev/stdin <<< "$PROFILE_PLIST")
  
            echo "üÜî Provisioning Profile UUID: $PROFILE_UUID"
            echo "üîñ Provisioning Profile Name: $PROFILE_NAME"
  
            xcodebuild archive \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APNS_TEAM_ID \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID
  
            echo "‚úÖ Xcode archive build complete!"

      - name: üì¶ Export .ipa from Xcode archive
        script: |
            echo "üì¶ Exporting IPA from Xcode archive..."
            
            PROFILE_NAME=$(grep -a -A1 "<key>Name</key>" profiles/profile.mobileprovision | grep -a "<string>" | sed -E 's/.*<string>(.*)<\/string>.*/\1/')
            echo "‚ÑπÔ∏è Extracted provisioning profile name: $PROFILE_NAME"
            
            cat > ExportOptions.plist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
            <key>method</key>
            <string>app-store</string>
            <key>provisioningProfiles</key>
            <dict>
            <key>$BUNDLE_ID</key>
            <string>$PROFILE_NAME</string>
            </dict>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            </dict>
            </plist>
            EOF
            
            xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/ios/ipa
            
            echo "‚úÖ Export complete!"
    artifacts:
      - *ios_app
      - flutter_build.log
      - flutter_build2.log
    publishing:
      - *email_release
      - app_store_connect:
          api_key: Encrypted(...)
          issuer_id: Encrypted(...)
          key_id: Encrypted(...)
  ios-and-android-workflow:
      name: ios and android workflow
      max_build_duration: 30
      instance_type: mac_mini_m2
      environment:
        flutter: stable
      scripts:
        #      - *pub_get
        - *debug_env
        - *change_app_name
        - *Inject_Firebase_iOS_Push
        - *Inject_Firebase
        - *update_package_names
        #      - *set_default_version
        - *Update_App_Version
        - *get_logo
        - *set_launcher_icons
        - *get_splash
        - *Update_SDK_Version
        - *build_apk
        - *build_ipa
      artifacts:
        - *android_apk
        - *android_abb
        - *ios_app
        - flutter_build.log
        - flutter_build2.log
        - fcm_token.txt
      #        - *android_abb
      publishing: *email_release

